{"ast":null,"code":"var _jsxFileName = \"/Users/ankitraj/Desktop/react.js/movies/entertain-hub/src/pages/Trending/Trending.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport \"./Trending.css\";\nimport { useEffect, useState } from \"react\";\nimport SingleContent from \"../../components/SingleContent/SingleContent\";\nimport CustomPagination from \"../../components/Pagination/CustomPagination\";\nimport Genres from \"../../components/Genres/Genres\";\nimport useGenre from \"../../hooks/useGenre\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = \"d310343\";\n\nconst Trending = () => {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const genreforURL = useGenre(selectedGenres);\n\n  const fetchTrending = async year => {\n    const {\n      data\n    } = await axios.get(`http://www.omdbapi.com/?apikey=${apiKey}&s=movie&type=movie&y=${year}&page=${page}`);\n    return data.Search;\n  };\n\n  const fetchMoviesByYearRanges = async ranges => {\n    let combinedResults = [];\n\n    for (const range of ranges) {\n      const [startYear, endYear] = range;\n\n      for (let year = startYear; year <= endYear; year++) {\n        const movies = await fetchTrending(year);\n        combinedResults = [...combinedResults, ...movies];\n      }\n    }\n\n    return combinedResults;\n  };\n\n  const fetchTrendingfunc = async () => {\n    const parseYearRanges = yearRangeString => {\n      return yearRangeString.split(\",\").map(range => {\n        const [start, end] = range.split(\"-\").map(year => parseInt(year, 10));\n        return [start, end];\n      });\n    };\n\n    if (genreforURL.length == 0) {\n      const url = `http://www.omdbapi.com/?apikey=${apiKey}&s=movie&type=movie&page=${page}`;\n      const {\n        data\n      } = await axios.get(url);\n      setContent(data.Search);\n    } else {\n      const yearRanges = parseYearRanges(genreforURL);\n      const movies = await fetchMoviesByYearRanges(yearRanges);\n      setContent(movies);\n    }\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchTrendingfunc();\n  }, [page, genreforURL]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"pageTitle\",\n      children: \" \\uD83D\\uDE0E Movies \\uD83D\\uDE1C \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Genres, {\n      type: \"tv\",\n      selectedGenres: selectedGenres,\n      setSelectedGenres: setSelectedGenres,\n      genres: genres,\n      setGenres: setGenres,\n      setPage: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trending\",\n      children: content && content.map(c => /*#__PURE__*/_jsxDEV(SingleContent, {\n        id: c.imdbID,\n        poster: c.Poster,\n        title: c.Title || c.name,\n        date: c.first_air_date || c.Year,\n        media_type: c.Type,\n        vote_average: c.vote_average\n      }, c.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomPagination, {\n      setPage: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Trending, \"gd6kYQfn9ktqRJ7D4y+a9VWliqA=\", false, function () {\n  return [useGenre];\n});\n\n_c = Trending;\nexport default Trending;\n\nvar _c;\n\n$RefreshReg$(_c, \"Trending\");","map":{"version":3,"sources":["/Users/ankitraj/Desktop/react.js/movies/entertain-hub/src/pages/Trending/Trending.js"],"names":["axios","useEffect","useState","SingleContent","CustomPagination","Genres","useGenre","apiKey","Trending","page","setPage","content","setContent","genres","setGenres","selectedGenres","setSelectedGenres","genreforURL","fetchTrending","year","data","get","Search","fetchMoviesByYearRanges","ranges","combinedResults","range","startYear","endYear","movies","fetchTrendingfunc","parseYearRanges","yearRangeString","split","map","start","end","parseInt","length","url","yearRanges","window","scroll","c","imdbID","Poster","Title","name","first_air_date","Year","Type","vote_average"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport \"./Trending.css\";\nimport { useEffect, useState } from \"react\";\nimport SingleContent from \"../../components/SingleContent/SingleContent\";\nimport CustomPagination from \"../../components/Pagination/CustomPagination\";\nimport Genres from \"../../components/Genres/Genres\";\nimport useGenre from \"../../hooks/useGenre\";\nconst apiKey = \"d310343\";\nconst Trending = () => {\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const genreforURL = useGenre(selectedGenres);\n  const fetchTrending = async (year) => {\n    const { data } = await axios.get(\n      `http://www.omdbapi.com/?apikey=${apiKey}&s=movie&type=movie&y=${year}&page=${page}`\n    );\n    return data.Search;\n  };\n\n  const fetchMoviesByYearRanges = async (ranges) => {\n    let combinedResults = [];\n    for (const range of ranges) {\n      const [startYear, endYear] = range;\n      for (let year = startYear; year <= endYear; year++) {\n        const movies = await fetchTrending(year);\n        combinedResults = [...combinedResults, ...movies];\n      }\n    }\n    return combinedResults;\n  };\n  const fetchTrendingfunc = async () => {\n    const parseYearRanges = (yearRangeString) => {\n      return yearRangeString.split(\",\").map((range) => {\n        const [start, end] = range.split(\"-\").map((year) => parseInt(year, 10));\n        return [start, end];\n      });\n    };\n    if (genreforURL.length == 0) {\n      const url = `http://www.omdbapi.com/?apikey=${apiKey}&s=movie&type=movie&page=${page}`;\n      const { data } = await axios.get(url);\n      setContent(data.Search);\n    } else {\n      const yearRanges = parseYearRanges(genreforURL);\n      const movies = await fetchMoviesByYearRanges(yearRanges);\n      setContent(movies);\n    }\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchTrendingfunc();\n  }, [page, genreforURL]);\n\n  return (\n    <div>\n      <span className=\"pageTitle\"> 😎 Movies 😜 </span>\n      <Genres\n        type=\"tv\"\n        selectedGenres={selectedGenres}\n        setSelectedGenres={setSelectedGenres}\n        genres={genres}\n        setGenres={setGenres}\n        setPage={setPage}\n      />\n      <div className=\"trending\">\n        {content &&\n          content.map((c) => (\n            <SingleContent\n              key={c.imdbID}\n              id={c.imdbID}\n              poster={c.Poster}\n              title={c.Title || c.name}\n              date={c.first_air_date || c.Year}\n              media_type={c.Type}\n              vote_average={c.vote_average}\n            />\n          ))}\n      </div>\n      <CustomPagination setPage={setPage} />\n    </div>\n  );\n};\n\nexport default Trending;\n"]},"metadata":{},"sourceType":"module"}